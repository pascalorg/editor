/**
 * Node-based Architecture Library
 *
 * Public API for working with the node-based data structure.
 */

// Re-export types
export type {
  AnyNode,
  BaseNode,
  BuildingElementNode,
  ColumnNode,
  CreateGridNodeOptions,
  CreateNodeOptions,
  DoorNode,
  GetNodeType,
  GridItem,
  GridNode,
  GroupNode,
  LevelChildNode,
  LevelNode,
  NodeType,
  NodeTypeMap,
  ReferenceImageNode,
  RoofNode,
  RoofSegmentNode,
  ScanNode,
  WallChildNode,
  WallNode,
  WindowNode,
} from './types'

// Re-export guards
export {
  assertNode,
  assertNodeType,
  canBeChildOf,
  getTypedNode,
  isBuildingElementNode,
  isColumnNode,
  isDoorNode,
  isGridNode,
  isGroupNode,
  isLevelChildNode,
  isLevelNode,
  isNode,
  isReferenceImageNode,
  isRoofNode,
  isRoofSegmentNode,
  isScanNode,
  isWallChildNode,
  isWallNode,
  isWindowNode,
  validateGridItem,
  validateNode,
  validateNodeTree,
} from './guards'

// Re-export utilities
export {
  addNode,
  cloneNode,
  countNodes,
  countNodesByType,
  filterTree,
  findAncestors,
  findDescendants,
  findNodeById,
  findNodes,
  findNodesByType,
  findParentNode,
  findSiblings,
  flattenTree,
  getLeafNodes,
  getNodeAtPath,
  getNodePath,
  getParentNodes,
  getTreeDepth,
  hasCircularReferences,
  mapTree,
  moveNode,
  removeNode,
  traverseTree,
  traverseTreeBreadthFirst,
  updateNode,
  validateParentReferences,
} from './utils'

// Re-export indexes
export type { NodeIndexes } from './indexes'

export {
  addNodeToIndexes,
  buildNodeIndex,
  buildNodeIndexes,
  getChildrenOfNode,
  getIndexStats,
  getLevelNode,
  getNodeById,
  getNodeLevel,
  getNodesInLevel,
  getNodesInLevelByType,
  getNodesByType,
  removeNodeFromIndexes,
  updateNodeInIndexes,
  validateIndexes,
} from './indexes'

// Re-export operations
export {
  addColumnToLevel,
  addDoorToWall,
  addLevel,
  addNodeToParent,
  addReferenceImageToLevel,
  addRoofSegmentToRoof,
  addRoofToLevel,
  addScanToLevel,
  addWallToLevel,
  addWindowToWall,
  deleteNode,
  deleteNodeChildren,
  deleteNodes,
  getDoorsInLevel,
  getLevel,
  getLevelByNumber,
  getNodesOfTypeInLevel,
  getWallsInLevel,
  getWindowsInLevel,
  moveNodeToParent,
  removeLevel,
  replaceRoofSegments,
  replaceWallsInLevel,
  setNodeOpacity,
  setNodePosition,
  setNodeRotation,
  setNodeSize,
  setNodeVisibility,
  setNodesOpacity,
  setNodesVisibility,
  updateLevel,
  updateNodeProperties,
} from './operations'

// Re-export selectors
export {
  createNodeSelector,
  createSingleNodeSelector,
  selectAllNodesOfType,
  selectAllReferenceImages,
  selectAllScans,
  selectAllWalls,
  selectColumnsFromLevel,
  selectDoorCountInLevel,
  selectDoorsFromLevel,
  selectDoorsFromWall,
  selectLevelById,
  selectLevelByNumber,
  selectLevelChildren,
  selectLevels,
  selectNodeById,
  selectNodeByIdFromIndex,
  selectNodeCountByType,
  selectNodeIndex,
  selectNodesOfTypeFromLevel,
  selectReferenceImagesFromLevel,
  selectRoofsFromLevel,
  selectScansFromLevel,
  selectVisibleNodesOfTypeFromLevel,
  selectVisibleReferenceImagesFromLevel,
  selectVisibleScansFromLevel,
  selectVisibleWallsFromLevel,
  selectWallCountInLevel,
  selectWallsFromLevel,
  selectWindowsFromLevel,
  selectWindowsFromWall,
} from './selectors'
